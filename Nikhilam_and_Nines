# Helper function to calculate complement
def complement(base, number):
    return base - number


# Determine the nearest power of 10 for a number
def nearest_power_of_10(n):
    power = 10 ** len(str(abs(n)))
    return power if abs(n) <= power else power * 10


# Special handling for cases where neither number is close to a power of 10
def special_case(mcand, mlier):
    len_multiplier = len(str(abs(mlier)))
    beta = int(str(mcand)[-len_multiplier:])  # Last digits matching multiplier's length
    alpha = int(str(mcand)[:-len_multiplier])  # Remaining leading digits
    alphaMinus1 = alpha - 1  # First part of the solution
    new_alpha: int = alpha  # new_alpha will include borrowed bits as needed

    print(f"\nSpecial Case Handling:")
    print(f"Original Alpha: {alpha}")
    print(f"AlphaMinus1 (first part): {alphaMinus1}")
    print(f"Beta (trailing part): {beta}")

    # Borrow digits until updated_beta is larger than new_alpha
    borrow = 1
    updated_beta = int(str(borrow) + str(beta))  # Initial beta with first borrowed digit

    while updated_beta <= alphaMinus1:
        borrow += 1  # Increment borrow
        updated_beta = int(str(borrow) + str(beta))  # Update beta with the new borrowed digit
        print(f"Trying with borrow={borrow}: updated_beta={updated_beta}")

    new_alpha = alpha + borrow  # new_alpha includes the borrowed bits
    print(f"New Alpha after borrowing: {new_alpha}")

    # Second part calculation
    second_part = updated_beta - new_alpha
    print(f"Second Part (updated beta - new_alpha): {second_part}")

    # Apply Nikhilam Sutra to the original beta
    base = 10 ** len(str(beta))
    beta_complement = base - beta
    third_part = beta_complement

    print(f"Third Part (Nikhilam on original beta): {third_part}")

    # Concatenate parts for the final result
    rezult = int(f"{alphaMinus1}{second_part}{third_part}")
    print(f"Final Result (Concatenating parts): {rezult}")
    return rezult


# Main Nikhilam operation function
def nikhilam_operation(mcand, mlier):
    base_mult = nearest_power_of_10(mcand)
    base_multi = nearest_power_of_10(mlier)

    print(f"\nMultiplicand: {mcand}, Multiplier: {mlier}")
    print(f"Closest base to multiplicand: {base_mult}, Closest base to multiplier: {base_multi}")

    if base_mult == base_multi:
        print("Type 1: Both numbers are close to a power of 10")

        comp_mult = complement(base_mult, mcand)
        comp_multi = complement(base_multi, mlier)

        cross_sum = mcand - comp_multi
        product_complements = comp_mult * comp_multi
        rezult = cross_sum * base_mult + product_complements

        print(f"Complement of {mcand} is {comp_mult}, complement of {mlier} is {comp_multi}")
        print(f"Cross-sum step: {mcand} - ({comp_multi}) = {cross_sum}")
        print(f"Product of complements step: {comp_mult} * {comp_multi} = {product_complements}")
        print(f"Final result: ({cross_sum} * {base_mult}) + {product_complements} = {rezult}")
        return rezult

    elif base_mult != base_multi and (abs(mcand) >= base_mult or abs(mlier) >= base_multi):
        print("Type 2: One number close to a power of 10, the other not (Nikhilam inapplicable)")

        rezult = mcand * mlier
        print("Result using standard multiplication:", rezult)
        return rezult

    else:
        print("Type 3: Neither number close to a power of 10 (Special Case Handling)")
        if mcand > mlier:
            return special_case(mcand, mlier)
        else:
            rezult = mcand * mlier
            print("Result using standard multiplication:", rezult)
            return rezult


# Loop to prompt user until they type 'q' to quit
while True:
    user_input = input("Enter the multiplicand and multiplier separated by a comma (or 'q' to quit): ")

    if user_input.lower() == 'q':
        print("Exiting the program. Goodbye!")
        break

    try:
        multiplicand, multiplier = map(int, user_input.split(","))
        result = nikhilam_operation(multiplicand, multiplier)
        print(f"Final Result: {result}\n")
    except ValueError:
        print("Please enter two valid integers separated by a comma, or 'q' to quit.")
